name: HunterMatrix CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'
  RUST_VERSION: '1.70'

jobs:
  # 代码质量检查
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy
        override: true
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r ai-security/requirements.txt
    
    - name: Install Node.js dependencies
      run: npm install
    
    - name: Python linting
      run: |
        flake8 ai-security/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check ai-security/
        isort --check-only ai-security/
        mypy ai-security/ --ignore-missing-imports
    
    - name: JavaScript linting
      run: |
        npx eslint web-ui/*.js
        npx prettier --check web-ui/*.js
    
    - name: Rust linting
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-targets --all-features -- -D warnings

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libssl-dev pkg-config
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake openssl pkg-config
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        pip install -r ai-security/requirements.txt
    
    - name: Run Python tests
      run: |
        cd ai-security
        python -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Run Rust tests
      run: cargo test --verbose
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
      uses: codecov/codecov-action@v3
      with:
        file: ./ai-security/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 构建测试
  build:
    name: Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup build environment
      run: |
        mkdir -p build
        cd build
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libssl-dev pkg-config
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake openssl pkg-config
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Test build artifacts
      run: |
        ls -la build/
        # 验证关键文件存在
        test -f build/clamscan || echo "clamscan not found"
        test -f build/clamd || echo "clamd not found"

  # 集成测试
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        python -m pip install --upgrade pip
        pip install -r ai-security/requirements.txt
        npm install
    
    - name: Build project
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
    
    - name: Run integration tests
      run: |
        chmod +x test_scanning.sh
        ./test_scanning.sh
    
    - name: Test web interface
      run: |
        cd web-ui
        python3 start_server.py &
        sleep 5
        curl -f http://localhost:8083/huntermatrix_final.html || exit 1
        pkill -f start_server.py

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 发布构建
  release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    needs: [lint, test, build, integration]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup build environment
      run: |
        mkdir -p build release
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libssl-dev pkg-config
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake openssl pkg-config
    
    - name: Build release
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release
        cpack
    
    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./build/*.tar.gz
        asset_name: huntermatrix-${{ matrix.os }}.tar.gz
        asset_content_type: application/gzip
